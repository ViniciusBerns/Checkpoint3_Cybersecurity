name: OWASP ZAP DAST Scan

on:
  push:
  pull_request:

jobs:
  zap_scan:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clonar c√≥digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Construir imagem da aplica√ß√£o
      - name: Build app Docker image
        run: docker build -t clickseguro-app .

      # 4Ô∏è‚É£ Subir container da aplica√ß√£o
      - name: Run application container
        run: |
          docker run -d --network host --name clickseguro-app clickseguro-app
          sleep 10

      # 5Ô∏è‚É£ Criar pasta para relat√≥rios e ajustar permiss√µes
      - name: Prepare writable folder for reports
        run: |
          mkdir -p zap_reports
          chmod 777 zap_reports

      # 6Ô∏è‚É£ Rodar o OWASP ZAP (Full Scan)
      - name: Run OWASP ZAP Full Scan
        run: |
          docker run --rm --network host \
            -v ${{ github.workspace }}/zap_reports:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            /bin/sh -c "
              chmod 777 /zap/wrk &&
              zap-full-scan.py -t http://localhost:8080 \
              -r /zap/wrk/report.html \
              -J /zap/wrk/report.json \
              -w /zap/wrk/report.md \
              -I || true
            "

      # 7Ô∏è‚É£ Se n√£o houver arquivos, tenta copiar de dentro do container tempor√°rio (failsafe)
      - name: Copy missing reports if not found
        run: |
          if [ -z "$(ls -A zap_reports)" ]; then
            echo '‚ö†Ô∏è Nenhum relat√≥rio encontrado, tentando extrair manualmente...'
            CONTAINER_ID=$(docker ps -a -q --filter ancestor=ghcr.io/zaproxy/zaproxy:stable | head -n 1)
            if [ -n "$CONTAINER_ID" ]; then
              docker cp $CONTAINER_ID:/zap/wrk/. zap_reports/ || true
            fi
          fi
          ls -lh zap_reports || true

      # 8Ô∏è‚É£ Verificar vulnerabilidades no JSON
      - name: Parse JSON and fail if HIGH or CRITICAL found
        run: |
          echo "üîç Analisando relat√≥rio JSON..."
          if [ ! -f "zap_reports/report.json" ]; then
            echo "‚ö†Ô∏è Arquivo report.json n√£o encontrado, mas relat√≥rios HTML/MD podem existir."
            exit 0
          fi

          HIGH_COUNT=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' zap_reports/report.json)
          CRITICAL_COUNT=$(jq '[.site[].alerts[] | select(.risk == "Critical")] | length' zap_reports/report.json)

          echo "‚ö†Ô∏è Vulnerabilidades High: $HIGH_COUNT"
          echo "üö® Vulnerabilidades Critical: $CRITICAL_COUNT"

          if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Vulnerabilidades graves detectadas."
            exit 1
          fi

      # 9Ô∏è‚É£ Upload dos relat√≥rios (sempre executa)
      - name: Upload ZAP reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap_reports
          path: zap_reports/

      # üîü Encerrar containers
      - name: Cleanup
        if: always()
        run: docker rm -f clickseguro-app || true
