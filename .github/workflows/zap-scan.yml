name: OWASP ZAP DAST Scan

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  zap_scan:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configura Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Build da imagem da aplica√ß√£o Node.js
      - name: Build app Docker image
        run: docker build -t clickseguro:ci -f Dockerfile .

      # 4Ô∏è‚É£ Cria rede Docker isolada
      - name: Create docker network
        run: docker network create zap-net || true

      # 5Ô∏è‚É£ Executa o container da aplica√ß√£o
      - name: Run application container
        run: docker run -d --name clickseguro-app --network zap-net clickseguro:ci

      # 6Ô∏è‚É£ Aguarda a aplica√ß√£o estar pronta (at√© 60 segundos)
      - name: Wait for app to be ready
        run: |
          for i in {1..30}; do
            if docker run --rm --network zap-net byrnedo/alpine-curl -sS http://clickseguro-app:8080 >/dev/null 2>&1; then
              echo "‚úÖ Aplica√ß√£o est√° pronta!"
              exit 0
            fi
            echo "‚è≥ Aguardando aplica√ß√£o... ($i)"
            sleep 2
          done
          echo "‚ùå Aplica√ß√£o n√£o respondeu a tempo." && exit 1

      # 7Ô∏è‚É£ Prepara pasta com permiss√µes de escrita
      - name: Prepare writable folder for reports
        run: |
          mkdir -p zap_reports
          chmod 777 zap_reports

      # 8Ô∏è‚É£ Executa OWASP ZAP Baseline Scan
      - name: Run OWASP ZAP Baseline Scan
        run: |
          docker run --rm --network zap-net \
            -v ${{ github.workspace }}/zap_reports:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://clickseguro-app:8080 -r report.html -j report.json -I || true

      # 9Ô∏è‚É£ Verifica se os relat√≥rios foram gerados
      - name: Check generated reports
        run: |
          echo "üìÑ Conte√∫do da pasta zap_reports:"
          ls -l zap_reports || true

      # üîü Analisa JSON e falha se encontrar High ou Critical
      - name: Parse JSON and fail if HIGH or CRITICAL found
        run: |
          echo "üìä Analisando relat√≥rio JSON..."
          if [ ! -f zap_reports/report.json ]; then
            echo "::error ::Arquivo report.json n√£o encontrado!"; exit 1;
          fi
          TOTAL=$(jq '[.site[]?.alerts[]?] | length' zap_reports/report.json)
          ALERTS_JSON=$(jq '[.site[]?.alerts[]?]' zap_reports/report.json)
          CRIT=$(echo "$ALERTS_JSON" | jq '[.[] | select(.risk == "Critical")] | length')
          HIGH=$(echo "$ALERTS_JSON" | jq '[.[] | select(.risk == "High")] | length')
          MEDIUM=$(echo "$ALERTS_JSON" | jq '[.[] | select(.risk == "Medium")] | length')
          LOW=$(echo "$ALERTS_JSON" | jq '[.[] | select(.risk == "Low")] | length')
          echo "üî∏ Total: $TOTAL | Critical=$CRIT | High=$HIGH | Medium=$MEDIUM | Low=$LOW"
          if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
            echo "::error ::üö® Vulnerabilidades High/Critical detectadas. Falhando pipeline."
            exit 1
          fi
          echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada."

      # 1Ô∏è‚É£1Ô∏è‚É£ Faz upload dos relat√≥rios como artefato
      - name: Upload ZAP reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap_reports
          path: zap_reports/

      # 1Ô∏è‚É£2Ô∏è‚É£ Limpa containers e rede (sempre)
      - name: Cleanup
        if: always()
        run: |
          docker rm -f clickseguro-app || true
          docker network rm zap-net || true
