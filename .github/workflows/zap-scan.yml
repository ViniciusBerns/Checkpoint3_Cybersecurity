name: OWASP ZAP DAST Scan

on:
  push:
  pull_request:

jobs:
  securityscanjob:
    name: OWASP ZAP Full Scan
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Clonar o reposit√≥rio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Construir imagem da aplica√ß√£o
      - name: Build app Docker image
        run: docker build -t clickseguro-app .

      # 4Ô∏è‚É£ Criar rede Docker customizada
      - name: Create Docker network
        run: docker network create zapnet

      # 5Ô∏è‚É£ Subir container da aplica√ß√£o na rede zapnet
      - name: Run application container
        run: |
          docker run -d --name clickseguro-app --network zapnet clickseguro-app
          echo "Aguardando app subir..."
          for i in {1..30}; do
            if curl -sSf http://clickseguro-app:8080 >/dev/null; then
              echo "‚úÖ App est√° acess√≠vel"
              break
            fi
            echo "‚è≥ Esperando app..."
            sleep 2
          done

      # 6Ô∏è‚É£ Preparar pasta para relat√≥rios
      - name: Prepare writable folder for reports
        run: mkdir -p zap_reports

      # 7Ô∏è‚É£ Rodar o OWASP ZAP Full Scan
      - name: Run OWASP ZAP Full Scan
        run: |
          docker run --name zap-scanner --network zapnet \
            -v ${{ github.workspace }}/zap_reports:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://clickseguro-app:8080 \
            -r /zap/wrk/report.html \
            -J /zap/wrk/report.json \
            -w /zap/wrk/report.md \
            -I -d

      # 8Ô∏è‚É£ Verificar se os relat√≥rios foram gerados
      - name: List ZAP reports
        run: ls -lh zap_reports

      # 9Ô∏è‚É£ Verificar vulnerabilidades no JSON
      - name: Parse JSON and fail if HIGH or CRITICAL found
        run: |
          echo "üîç Analisando relat√≥rio JSON..."
          if [ ! -f "zap_reports/report.json" ]; then
            echo "‚ö†Ô∏è Arquivo report.json n√£o encontrado. Verifique se o alvo respondeu ao ZAP."
            exit 0
          fi

          HIGH_COUNT=$(jq '[.site[].alerts[] | select(.risk == "High")] | length' zap_reports/report.json)
          CRITICAL_COUNT=$(jq '[.site[].alerts[] | select(.risk == "Critical")] | length' zap_reports/report.json)

          echo "‚ö†Ô∏è Vulnerabilidades High: $HIGH_COUNT"
          echo "üö® Vulnerabilidades Critical: $CRITICAL_COUNT"

          if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå Vulnerabilidades graves detectadas."
            exit 1
          fi

      # üîü Upload dos relat√≥rios como artefato
      - name: Upload ZAP reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap_reports/

      # üîö Cleanup de containers e rede
      - name: Cleanup
        if: always()
        run: |
          docker rm -f clickseguro-app || true
          docker rm -f zap-scanner || true
          docker network rm zapnet || true
